// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Heartbeat {
    // message fields
    field_type: ::std::option::Option<u32>,
    autopilot: ::std::option::Option<u32>,
    base_mode: ::std::option::Option<u32>,
    custom_mode: ::std::option::Option<u32>,
    system_status: ::std::option::Option<u32>,
    mavlink_version: ::std::option::Option<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Heartbeat {
    pub fn new() -> Heartbeat {
        ::std::default::Default::default()
    }

    // required uint32 type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: u32) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> u32 {
        self.field_type.unwrap_or(0)
    }

    // required uint32 autopilot = 2;

    pub fn clear_autopilot(&mut self) {
        self.autopilot = ::std::option::Option::None;
    }

    pub fn has_autopilot(&self) -> bool {
        self.autopilot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autopilot(&mut self, v: u32) {
        self.autopilot = ::std::option::Option::Some(v);
    }

    pub fn get_autopilot(&self) -> u32 {
        self.autopilot.unwrap_or(0)
    }

    // required uint32 base_mode = 3;

    pub fn clear_base_mode(&mut self) {
        self.base_mode = ::std::option::Option::None;
    }

    pub fn has_base_mode(&self) -> bool {
        self.base_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_mode(&mut self, v: u32) {
        self.base_mode = ::std::option::Option::Some(v);
    }

    pub fn get_base_mode(&self) -> u32 {
        self.base_mode.unwrap_or(0)
    }

    // required uint32 custom_mode = 4;

    pub fn clear_custom_mode(&mut self) {
        self.custom_mode = ::std::option::Option::None;
    }

    pub fn has_custom_mode(&self) -> bool {
        self.custom_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_custom_mode(&mut self, v: u32) {
        self.custom_mode = ::std::option::Option::Some(v);
    }

    pub fn get_custom_mode(&self) -> u32 {
        self.custom_mode.unwrap_or(0)
    }

    // required uint32 system_status = 5;

    pub fn clear_system_status(&mut self) {
        self.system_status = ::std::option::Option::None;
    }

    pub fn has_system_status(&self) -> bool {
        self.system_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_system_status(&mut self, v: u32) {
        self.system_status = ::std::option::Option::Some(v);
    }

    pub fn get_system_status(&self) -> u32 {
        self.system_status.unwrap_or(0)
    }

    // required uint32 mavlink_version = 6;

    pub fn clear_mavlink_version(&mut self) {
        self.mavlink_version = ::std::option::Option::None;
    }

    pub fn has_mavlink_version(&self) -> bool {
        self.mavlink_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mavlink_version(&mut self, v: u32) {
        self.mavlink_version = ::std::option::Option::Some(v);
    }

    pub fn get_mavlink_version(&self) -> u32 {
        self.mavlink_version.unwrap_or(0)
    }
}

impl ::protobuf::Message for Heartbeat {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        if self.autopilot.is_none() {
            return false;
        }
        if self.base_mode.is_none() {
            return false;
        }
        if self.custom_mode.is_none() {
            return false;
        }
        if self.system_status.is_none() {
            return false;
        }
        if self.mavlink_version.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.autopilot = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.base_mode = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.custom_mode = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.system_status = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mavlink_version = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.autopilot {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.base_mode {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.custom_mode {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.system_status {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.mavlink_version {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.autopilot {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.base_mode {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.custom_mode {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.system_status {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.mavlink_version {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Heartbeat {
        Heartbeat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "type",
                    |m: &Heartbeat| { &m.field_type },
                    |m: &mut Heartbeat| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "autopilot",
                    |m: &Heartbeat| { &m.autopilot },
                    |m: &mut Heartbeat| { &mut m.autopilot },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "base_mode",
                    |m: &Heartbeat| { &m.base_mode },
                    |m: &mut Heartbeat| { &mut m.base_mode },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "custom_mode",
                    |m: &Heartbeat| { &m.custom_mode },
                    |m: &mut Heartbeat| { &mut m.custom_mode },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "system_status",
                    |m: &Heartbeat| { &m.system_status },
                    |m: &mut Heartbeat| { &mut m.system_status },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mavlink_version",
                    |m: &Heartbeat| { &m.mavlink_version },
                    |m: &mut Heartbeat| { &mut m.mavlink_version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Heartbeat>(
                    "Heartbeat",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Heartbeat {
        static mut instance: ::protobuf::lazy::Lazy<Heartbeat> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Heartbeat,
        };
        unsafe {
            instance.get(Heartbeat::new)
        }
    }
}

impl ::protobuf::Clear for Heartbeat {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_autopilot();
        self.clear_base_mode();
        self.clear_custom_mode();
        self.clear_system_status();
        self.clear_mavlink_version();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Heartbeat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Heartbeat {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Attitude {
    // message fields
    time_boot_ms: ::std::option::Option<u32>,
    roll: ::std::option::Option<f32>,
    pitch: ::std::option::Option<f32>,
    yaw: ::std::option::Option<f32>,
    rollspeed: ::std::option::Option<f32>,
    pitchspeed: ::std::option::Option<f32>,
    yawspeed: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Attitude {
    pub fn new() -> Attitude {
        ::std::default::Default::default()
    }

    // required uint32 time_boot_ms = 1;

    pub fn clear_time_boot_ms(&mut self) {
        self.time_boot_ms = ::std::option::Option::None;
    }

    pub fn has_time_boot_ms(&self) -> bool {
        self.time_boot_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_boot_ms(&mut self, v: u32) {
        self.time_boot_ms = ::std::option::Option::Some(v);
    }

    pub fn get_time_boot_ms(&self) -> u32 {
        self.time_boot_ms.unwrap_or(0)
    }

    // required float roll = 2;

    pub fn clear_roll(&mut self) {
        self.roll = ::std::option::Option::None;
    }

    pub fn has_roll(&self) -> bool {
        self.roll.is_some()
    }

    // Param is passed by value, moved
    pub fn set_roll(&mut self, v: f32) {
        self.roll = ::std::option::Option::Some(v);
    }

    pub fn get_roll(&self) -> f32 {
        self.roll.unwrap_or(0.)
    }

    // required float pitch = 3;

    pub fn clear_pitch(&mut self) {
        self.pitch = ::std::option::Option::None;
    }

    pub fn has_pitch(&self) -> bool {
        self.pitch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pitch(&mut self, v: f32) {
        self.pitch = ::std::option::Option::Some(v);
    }

    pub fn get_pitch(&self) -> f32 {
        self.pitch.unwrap_or(0.)
    }

    // required float yaw = 4;

    pub fn clear_yaw(&mut self) {
        self.yaw = ::std::option::Option::None;
    }

    pub fn has_yaw(&self) -> bool {
        self.yaw.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yaw(&mut self, v: f32) {
        self.yaw = ::std::option::Option::Some(v);
    }

    pub fn get_yaw(&self) -> f32 {
        self.yaw.unwrap_or(0.)
    }

    // required float rollspeed = 5;

    pub fn clear_rollspeed(&mut self) {
        self.rollspeed = ::std::option::Option::None;
    }

    pub fn has_rollspeed(&self) -> bool {
        self.rollspeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rollspeed(&mut self, v: f32) {
        self.rollspeed = ::std::option::Option::Some(v);
    }

    pub fn get_rollspeed(&self) -> f32 {
        self.rollspeed.unwrap_or(0.)
    }

    // required float pitchspeed = 6;

    pub fn clear_pitchspeed(&mut self) {
        self.pitchspeed = ::std::option::Option::None;
    }

    pub fn has_pitchspeed(&self) -> bool {
        self.pitchspeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pitchspeed(&mut self, v: f32) {
        self.pitchspeed = ::std::option::Option::Some(v);
    }

    pub fn get_pitchspeed(&self) -> f32 {
        self.pitchspeed.unwrap_or(0.)
    }

    // required float yawspeed = 7;

    pub fn clear_yawspeed(&mut self) {
        self.yawspeed = ::std::option::Option::None;
    }

    pub fn has_yawspeed(&self) -> bool {
        self.yawspeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yawspeed(&mut self, v: f32) {
        self.yawspeed = ::std::option::Option::Some(v);
    }

    pub fn get_yawspeed(&self) -> f32 {
        self.yawspeed.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Attitude {
    fn is_initialized(&self) -> bool {
        if self.time_boot_ms.is_none() {
            return false;
        }
        if self.roll.is_none() {
            return false;
        }
        if self.pitch.is_none() {
            return false;
        }
        if self.yaw.is_none() {
            return false;
        }
        if self.rollspeed.is_none() {
            return false;
        }
        if self.pitchspeed.is_none() {
            return false;
        }
        if self.yawspeed.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_boot_ms = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.roll = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pitch = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.yaw = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rollspeed = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pitchspeed = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.yawspeed = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time_boot_ms {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.roll {
            my_size += 5;
        }
        if let Some(v) = self.pitch {
            my_size += 5;
        }
        if let Some(v) = self.yaw {
            my_size += 5;
        }
        if let Some(v) = self.rollspeed {
            my_size += 5;
        }
        if let Some(v) = self.pitchspeed {
            my_size += 5;
        }
        if let Some(v) = self.yawspeed {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time_boot_ms {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.roll {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.pitch {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.yaw {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.rollspeed {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.pitchspeed {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.yawspeed {
            os.write_float(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Attitude {
        Attitude::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "time_boot_ms",
                    |m: &Attitude| { &m.time_boot_ms },
                    |m: &mut Attitude| { &mut m.time_boot_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "roll",
                    |m: &Attitude| { &m.roll },
                    |m: &mut Attitude| { &mut m.roll },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pitch",
                    |m: &Attitude| { &m.pitch },
                    |m: &mut Attitude| { &mut m.pitch },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "yaw",
                    |m: &Attitude| { &m.yaw },
                    |m: &mut Attitude| { &mut m.yaw },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "rollspeed",
                    |m: &Attitude| { &m.rollspeed },
                    |m: &mut Attitude| { &mut m.rollspeed },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pitchspeed",
                    |m: &Attitude| { &m.pitchspeed },
                    |m: &mut Attitude| { &mut m.pitchspeed },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "yawspeed",
                    |m: &Attitude| { &m.yawspeed },
                    |m: &mut Attitude| { &mut m.yawspeed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Attitude>(
                    "Attitude",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Attitude {
        static mut instance: ::protobuf::lazy::Lazy<Attitude> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Attitude,
        };
        unsafe {
            instance.get(Attitude::new)
        }
    }
}

impl ::protobuf::Clear for Attitude {
    fn clear(&mut self) {
        self.clear_time_boot_ms();
        self.clear_roll();
        self.clear_pitch();
        self.clear_yaw();
        self.clear_rollspeed();
        self.clear_pitchspeed();
        self.clear_yawspeed();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Attitude {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Attitude {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GlobalPositionInt {
    // message fields
    time_boot_ms: ::std::option::Option<u32>,
    lat: ::std::option::Option<i32>,
    lon: ::std::option::Option<i32>,
    alt: ::std::option::Option<i32>,
    relative_alt: ::std::option::Option<i32>,
    vx: ::std::option::Option<i32>,
    vy: ::std::option::Option<i32>,
    vz: ::std::option::Option<i32>,
    hdg: ::std::option::Option<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GlobalPositionInt {
    pub fn new() -> GlobalPositionInt {
        ::std::default::Default::default()
    }

    // required uint32 time_boot_ms = 1;

    pub fn clear_time_boot_ms(&mut self) {
        self.time_boot_ms = ::std::option::Option::None;
    }

    pub fn has_time_boot_ms(&self) -> bool {
        self.time_boot_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_boot_ms(&mut self, v: u32) {
        self.time_boot_ms = ::std::option::Option::Some(v);
    }

    pub fn get_time_boot_ms(&self) -> u32 {
        self.time_boot_ms.unwrap_or(0)
    }

    // required int32 lat = 2;

    pub fn clear_lat(&mut self) {
        self.lat = ::std::option::Option::None;
    }

    pub fn has_lat(&self) -> bool {
        self.lat.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lat(&mut self, v: i32) {
        self.lat = ::std::option::Option::Some(v);
    }

    pub fn get_lat(&self) -> i32 {
        self.lat.unwrap_or(0)
    }

    // required int32 lon = 3;

    pub fn clear_lon(&mut self) {
        self.lon = ::std::option::Option::None;
    }

    pub fn has_lon(&self) -> bool {
        self.lon.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lon(&mut self, v: i32) {
        self.lon = ::std::option::Option::Some(v);
    }

    pub fn get_lon(&self) -> i32 {
        self.lon.unwrap_or(0)
    }

    // required int32 alt = 4;

    pub fn clear_alt(&mut self) {
        self.alt = ::std::option::Option::None;
    }

    pub fn has_alt(&self) -> bool {
        self.alt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alt(&mut self, v: i32) {
        self.alt = ::std::option::Option::Some(v);
    }

    pub fn get_alt(&self) -> i32 {
        self.alt.unwrap_or(0)
    }

    // required int32 relative_alt = 5;

    pub fn clear_relative_alt(&mut self) {
        self.relative_alt = ::std::option::Option::None;
    }

    pub fn has_relative_alt(&self) -> bool {
        self.relative_alt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relative_alt(&mut self, v: i32) {
        self.relative_alt = ::std::option::Option::Some(v);
    }

    pub fn get_relative_alt(&self) -> i32 {
        self.relative_alt.unwrap_or(0)
    }

    // required int32 vx = 6;

    pub fn clear_vx(&mut self) {
        self.vx = ::std::option::Option::None;
    }

    pub fn has_vx(&self) -> bool {
        self.vx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vx(&mut self, v: i32) {
        self.vx = ::std::option::Option::Some(v);
    }

    pub fn get_vx(&self) -> i32 {
        self.vx.unwrap_or(0)
    }

    // required int32 vy = 7;

    pub fn clear_vy(&mut self) {
        self.vy = ::std::option::Option::None;
    }

    pub fn has_vy(&self) -> bool {
        self.vy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vy(&mut self, v: i32) {
        self.vy = ::std::option::Option::Some(v);
    }

    pub fn get_vy(&self) -> i32 {
        self.vy.unwrap_or(0)
    }

    // required int32 vz = 8;

    pub fn clear_vz(&mut self) {
        self.vz = ::std::option::Option::None;
    }

    pub fn has_vz(&self) -> bool {
        self.vz.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vz(&mut self, v: i32) {
        self.vz = ::std::option::Option::Some(v);
    }

    pub fn get_vz(&self) -> i32 {
        self.vz.unwrap_or(0)
    }

    // required uint32 hdg = 9;

    pub fn clear_hdg(&mut self) {
        self.hdg = ::std::option::Option::None;
    }

    pub fn has_hdg(&self) -> bool {
        self.hdg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hdg(&mut self, v: u32) {
        self.hdg = ::std::option::Option::Some(v);
    }

    pub fn get_hdg(&self) -> u32 {
        self.hdg.unwrap_or(0)
    }
}

impl ::protobuf::Message for GlobalPositionInt {
    fn is_initialized(&self) -> bool {
        if self.time_boot_ms.is_none() {
            return false;
        }
        if self.lat.is_none() {
            return false;
        }
        if self.lon.is_none() {
            return false;
        }
        if self.alt.is_none() {
            return false;
        }
        if self.relative_alt.is_none() {
            return false;
        }
        if self.vx.is_none() {
            return false;
        }
        if self.vy.is_none() {
            return false;
        }
        if self.vz.is_none() {
            return false;
        }
        if self.hdg.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_boot_ms = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.lat = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.lon = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.alt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.relative_alt = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vx = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vy = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vz = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hdg = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.time_boot_ms {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lat {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lon {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.alt {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.relative_alt {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.vx {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.vy {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.vz {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.hdg {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.time_boot_ms {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.lat {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.lon {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.alt {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.relative_alt {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.vx {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.vy {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.vz {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.hdg {
            os.write_uint32(9, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GlobalPositionInt {
        GlobalPositionInt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "time_boot_ms",
                    |m: &GlobalPositionInt| { &m.time_boot_ms },
                    |m: &mut GlobalPositionInt| { &mut m.time_boot_ms },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "lat",
                    |m: &GlobalPositionInt| { &m.lat },
                    |m: &mut GlobalPositionInt| { &mut m.lat },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "lon",
                    |m: &GlobalPositionInt| { &m.lon },
                    |m: &mut GlobalPositionInt| { &mut m.lon },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "alt",
                    |m: &GlobalPositionInt| { &m.alt },
                    |m: &mut GlobalPositionInt| { &mut m.alt },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "relative_alt",
                    |m: &GlobalPositionInt| { &m.relative_alt },
                    |m: &mut GlobalPositionInt| { &mut m.relative_alt },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "vx",
                    |m: &GlobalPositionInt| { &m.vx },
                    |m: &mut GlobalPositionInt| { &mut m.vx },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "vy",
                    |m: &GlobalPositionInt| { &m.vy },
                    |m: &mut GlobalPositionInt| { &mut m.vy },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "vz",
                    |m: &GlobalPositionInt| { &m.vz },
                    |m: &mut GlobalPositionInt| { &mut m.vz },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "hdg",
                    |m: &GlobalPositionInt| { &m.hdg },
                    |m: &mut GlobalPositionInt| { &mut m.hdg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GlobalPositionInt>(
                    "GlobalPositionInt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GlobalPositionInt {
        static mut instance: ::protobuf::lazy::Lazy<GlobalPositionInt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GlobalPositionInt,
        };
        unsafe {
            instance.get(GlobalPositionInt::new)
        }
    }
}

impl ::protobuf::Clear for GlobalPositionInt {
    fn clear(&mut self) {
        self.clear_time_boot_ms();
        self.clear_lat();
        self.clear_lon();
        self.clear_alt();
        self.clear_relative_alt();
        self.clear_vx();
        self.clear_vy();
        self.clear_vz();
        self.clear_hdg();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GlobalPositionInt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GlobalPositionInt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VfrHud {
    // message fields
    airspeed: ::std::option::Option<f32>,
    groundspeed: ::std::option::Option<f32>,
    heading: ::std::option::Option<i32>,
    throttle: ::std::option::Option<u32>,
    alt: ::std::option::Option<f32>,
    climn: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VfrHud {
    pub fn new() -> VfrHud {
        ::std::default::Default::default()
    }

    // required float airspeed = 1;

    pub fn clear_airspeed(&mut self) {
        self.airspeed = ::std::option::Option::None;
    }

    pub fn has_airspeed(&self) -> bool {
        self.airspeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_airspeed(&mut self, v: f32) {
        self.airspeed = ::std::option::Option::Some(v);
    }

    pub fn get_airspeed(&self) -> f32 {
        self.airspeed.unwrap_or(0.)
    }

    // required float groundspeed = 2;

    pub fn clear_groundspeed(&mut self) {
        self.groundspeed = ::std::option::Option::None;
    }

    pub fn has_groundspeed(&self) -> bool {
        self.groundspeed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_groundspeed(&mut self, v: f32) {
        self.groundspeed = ::std::option::Option::Some(v);
    }

    pub fn get_groundspeed(&self) -> f32 {
        self.groundspeed.unwrap_or(0.)
    }

    // required int32 heading = 3;

    pub fn clear_heading(&mut self) {
        self.heading = ::std::option::Option::None;
    }

    pub fn has_heading(&self) -> bool {
        self.heading.is_some()
    }

    // Param is passed by value, moved
    pub fn set_heading(&mut self, v: i32) {
        self.heading = ::std::option::Option::Some(v);
    }

    pub fn get_heading(&self) -> i32 {
        self.heading.unwrap_or(0)
    }

    // required uint32 throttle = 4;

    pub fn clear_throttle(&mut self) {
        self.throttle = ::std::option::Option::None;
    }

    pub fn has_throttle(&self) -> bool {
        self.throttle.is_some()
    }

    // Param is passed by value, moved
    pub fn set_throttle(&mut self, v: u32) {
        self.throttle = ::std::option::Option::Some(v);
    }

    pub fn get_throttle(&self) -> u32 {
        self.throttle.unwrap_or(0)
    }

    // required float alt = 5;

    pub fn clear_alt(&mut self) {
        self.alt = ::std::option::Option::None;
    }

    pub fn has_alt(&self) -> bool {
        self.alt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_alt(&mut self, v: f32) {
        self.alt = ::std::option::Option::Some(v);
    }

    pub fn get_alt(&self) -> f32 {
        self.alt.unwrap_or(0.)
    }

    // required float climn = 6;

    pub fn clear_climn(&mut self) {
        self.climn = ::std::option::Option::None;
    }

    pub fn has_climn(&self) -> bool {
        self.climn.is_some()
    }

    // Param is passed by value, moved
    pub fn set_climn(&mut self, v: f32) {
        self.climn = ::std::option::Option::Some(v);
    }

    pub fn get_climn(&self) -> f32 {
        self.climn.unwrap_or(0.)
    }
}

impl ::protobuf::Message for VfrHud {
    fn is_initialized(&self) -> bool {
        if self.airspeed.is_none() {
            return false;
        }
        if self.groundspeed.is_none() {
            return false;
        }
        if self.heading.is_none() {
            return false;
        }
        if self.throttle.is_none() {
            return false;
        }
        if self.alt.is_none() {
            return false;
        }
        if self.climn.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.airspeed = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.groundspeed = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.heading = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.throttle = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.alt = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.climn = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.airspeed {
            my_size += 5;
        }
        if let Some(v) = self.groundspeed {
            my_size += 5;
        }
        if let Some(v) = self.heading {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.throttle {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.alt {
            my_size += 5;
        }
        if let Some(v) = self.climn {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.airspeed {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.groundspeed {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.heading {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.throttle {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.alt {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.climn {
            os.write_float(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VfrHud {
        VfrHud::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "airspeed",
                    |m: &VfrHud| { &m.airspeed },
                    |m: &mut VfrHud| { &mut m.airspeed },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "groundspeed",
                    |m: &VfrHud| { &m.groundspeed },
                    |m: &mut VfrHud| { &mut m.groundspeed },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "heading",
                    |m: &VfrHud| { &m.heading },
                    |m: &mut VfrHud| { &mut m.heading },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "throttle",
                    |m: &VfrHud| { &m.throttle },
                    |m: &mut VfrHud| { &mut m.throttle },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "alt",
                    |m: &VfrHud| { &m.alt },
                    |m: &mut VfrHud| { &mut m.alt },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "climn",
                    |m: &VfrHud| { &m.climn },
                    |m: &mut VfrHud| { &mut m.climn },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VfrHud>(
                    "VfrHud",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VfrHud {
        static mut instance: ::protobuf::lazy::Lazy<VfrHud> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VfrHud,
        };
        unsafe {
            instance.get(VfrHud::new)
        }
    }
}

impl ::protobuf::Clear for VfrHud {
    fn clear(&mut self) {
        self.clear_airspeed();
        self.clear_groundspeed();
        self.clear_heading();
        self.clear_throttle();
        self.clear_alt();
        self.clear_climn();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VfrHud {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VfrHud {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MavlinkMessage {
    // message fields
    heartbeat: ::protobuf::RepeatedField<Heartbeat>,
    attitude: ::protobuf::RepeatedField<Attitude>,
    vfr_hud: ::protobuf::RepeatedField<VfrHud>,
    global_position_int: ::protobuf::RepeatedField<GlobalPositionInt>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MavlinkMessage {
    pub fn new() -> MavlinkMessage {
        ::std::default::Default::default()
    }

    // repeated .Heartbeat heartbeat = 1;

    pub fn clear_heartbeat(&mut self) {
        self.heartbeat.clear();
    }

    // Param is passed by value, moved
    pub fn set_heartbeat(&mut self, v: ::protobuf::RepeatedField<Heartbeat>) {
        self.heartbeat = v;
    }

    // Mutable pointer to the field.
    pub fn mut_heartbeat(&mut self) -> &mut ::protobuf::RepeatedField<Heartbeat> {
        &mut self.heartbeat
    }

    // Take field
    pub fn take_heartbeat(&mut self) -> ::protobuf::RepeatedField<Heartbeat> {
        ::std::mem::replace(&mut self.heartbeat, ::protobuf::RepeatedField::new())
    }

    pub fn get_heartbeat(&self) -> &[Heartbeat] {
        &self.heartbeat
    }

    // repeated .Attitude attitude = 2;

    pub fn clear_attitude(&mut self) {
        self.attitude.clear();
    }

    // Param is passed by value, moved
    pub fn set_attitude(&mut self, v: ::protobuf::RepeatedField<Attitude>) {
        self.attitude = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attitude(&mut self) -> &mut ::protobuf::RepeatedField<Attitude> {
        &mut self.attitude
    }

    // Take field
    pub fn take_attitude(&mut self) -> ::protobuf::RepeatedField<Attitude> {
        ::std::mem::replace(&mut self.attitude, ::protobuf::RepeatedField::new())
    }

    pub fn get_attitude(&self) -> &[Attitude] {
        &self.attitude
    }

    // repeated .VfrHud vfr_hud = 3;

    pub fn clear_vfr_hud(&mut self) {
        self.vfr_hud.clear();
    }

    // Param is passed by value, moved
    pub fn set_vfr_hud(&mut self, v: ::protobuf::RepeatedField<VfrHud>) {
        self.vfr_hud = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vfr_hud(&mut self) -> &mut ::protobuf::RepeatedField<VfrHud> {
        &mut self.vfr_hud
    }

    // Take field
    pub fn take_vfr_hud(&mut self) -> ::protobuf::RepeatedField<VfrHud> {
        ::std::mem::replace(&mut self.vfr_hud, ::protobuf::RepeatedField::new())
    }

    pub fn get_vfr_hud(&self) -> &[VfrHud] {
        &self.vfr_hud
    }

    // repeated .GlobalPositionInt global_position_int = 4;

    pub fn clear_global_position_int(&mut self) {
        self.global_position_int.clear();
    }

    // Param is passed by value, moved
    pub fn set_global_position_int(&mut self, v: ::protobuf::RepeatedField<GlobalPositionInt>) {
        self.global_position_int = v;
    }

    // Mutable pointer to the field.
    pub fn mut_global_position_int(&mut self) -> &mut ::protobuf::RepeatedField<GlobalPositionInt> {
        &mut self.global_position_int
    }

    // Take field
    pub fn take_global_position_int(&mut self) -> ::protobuf::RepeatedField<GlobalPositionInt> {
        ::std::mem::replace(&mut self.global_position_int, ::protobuf::RepeatedField::new())
    }

    pub fn get_global_position_int(&self) -> &[GlobalPositionInt] {
        &self.global_position_int
    }
}

impl ::protobuf::Message for MavlinkMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.heartbeat {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.attitude {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vfr_hud {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.global_position_int {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.heartbeat)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attitude)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vfr_hud)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.global_position_int)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.heartbeat {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.attitude {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.vfr_hud {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.global_position_int {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.heartbeat {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.attitude {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.vfr_hud {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.global_position_int {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MavlinkMessage {
        MavlinkMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Heartbeat>>(
                    "heartbeat",
                    |m: &MavlinkMessage| { &m.heartbeat },
                    |m: &mut MavlinkMessage| { &mut m.heartbeat },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Attitude>>(
                    "attitude",
                    |m: &MavlinkMessage| { &m.attitude },
                    |m: &mut MavlinkMessage| { &mut m.attitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VfrHud>>(
                    "vfr_hud",
                    |m: &MavlinkMessage| { &m.vfr_hud },
                    |m: &mut MavlinkMessage| { &mut m.vfr_hud },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GlobalPositionInt>>(
                    "global_position_int",
                    |m: &MavlinkMessage| { &m.global_position_int },
                    |m: &mut MavlinkMessage| { &mut m.global_position_int },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MavlinkMessage>(
                    "MavlinkMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MavlinkMessage {
        static mut instance: ::protobuf::lazy::Lazy<MavlinkMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MavlinkMessage,
        };
        unsafe {
            instance.get(MavlinkMessage::new)
        }
    }
}

impl ::protobuf::Clear for MavlinkMessage {
    fn clear(&mut self) {
        self.clear_heartbeat();
        self.clear_attitude();
        self.clear_vfr_hud();
        self.clear_global_position_int();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MavlinkMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MavlinkMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14mavlink_common.proto\x12\0\"\x9c\x01\n\tHeartbeat\x12\x10\n\x04typ\
    e\x18\x01\x20\x02(\rB\x02\x18\0\x12\x15\n\tautopilot\x18\x02\x20\x02(\rB\
    \x02\x18\0\x12\x15\n\tbase_mode\x18\x03\x20\x02(\rB\x02\x18\0\x12\x17\n\
    \x0bcustom_mode\x18\x04\x20\x02(\rB\x02\x18\0\x12\x19\n\rsystem_status\
    \x18\x05\x20\x02(\rB\x02\x18\0\x12\x1b\n\x0fmavlink_version\x18\x06\x20\
    \x02(\rB\x02\x18\0\"\x9f\x01\n\x08Attitude\x12\x18\n\x0ctime_boot_ms\x18\
    \x01\x20\x02(\rB\x02\x18\0\x12\x10\n\x04roll\x18\x02\x20\x02(\x02B\x02\
    \x18\0\x12\x11\n\x05pitch\x18\x03\x20\x02(\x02B\x02\x18\0\x12\x0f\n\x03y\
    aw\x18\x04\x20\x02(\x02B\x02\x18\0\x12\x15\n\trollspeed\x18\x05\x20\x02(\
    \x02B\x02\x18\0\x12\x16\n\npitchspeed\x18\x06\x20\x02(\x02B\x02\x18\0\
    \x12\x14\n\x08yawspeed\x18\x07\x20\x02(\x02B\x02\x18\0\"\xbb\x01\n\x11Gl\
    obalPositionInt\x12\x18\n\x0ctime_boot_ms\x18\x01\x20\x02(\rB\x02\x18\0\
    \x12\x0f\n\x03lat\x18\x02\x20\x02(\x05B\x02\x18\0\x12\x0f\n\x03lon\x18\
    \x03\x20\x02(\x05B\x02\x18\0\x12\x0f\n\x03alt\x18\x04\x20\x02(\x05B\x02\
    \x18\0\x12\x18\n\x0crelative_alt\x18\x05\x20\x02(\x05B\x02\x18\0\x12\x0e\
    \n\x02vx\x18\x06\x20\x02(\x05B\x02\x18\0\x12\x0e\n\x02vy\x18\x07\x20\x02\
    (\x05B\x02\x18\0\x12\x0e\n\x02vz\x18\x08\x20\x02(\x05B\x02\x18\0\x12\x0f\
    \n\x03hdg\x18\t\x20\x02(\rB\x02\x18\0\"\x86\x01\n\x06VfrHud\x12\x14\n\
    \x08airspeed\x18\x01\x20\x02(\x02B\x02\x18\0\x12\x17\n\x0bgroundspeed\
    \x18\x02\x20\x02(\x02B\x02\x18\0\x12\x13\n\x07heading\x18\x03\x20\x02(\
    \x05B\x02\x18\0\x12\x14\n\x08throttle\x18\x04\x20\x02(\rB\x02\x18\0\x12\
    \x0f\n\x03alt\x18\x05\x20\x02(\x02B\x02\x18\0\x12\x11\n\x05climn\x18\x06\
    \x20\x02(\x02B\x02\x18\0\"\xa7\x01\n\x0eMavlinkMessage\x12!\n\theartbeat\
    \x18\x01\x20\x03(\x0b2\n.HeartbeatB\x02\x18\0\x12\x1f\n\x08attitude\x18\
    \x02\x20\x03(\x0b2\t.AttitudeB\x02\x18\0\x12\x1c\n\x07vfr_hud\x18\x03\
    \x20\x03(\x0b2\x07.VfrHudB\x02\x18\0\x123\n\x13global_position_int\x18\
    \x04\x20\x03(\x0b2\x12.GlobalPositionIntB\x02\x18\0B\0b\x06proto2\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
